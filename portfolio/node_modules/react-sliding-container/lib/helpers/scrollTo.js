"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var easings_1 = require("./easings");
var animating = false;
var isElementWindow = function (element) {
    return element.toString() === '[object Window]';
};
exports.scrollTo = function (element, to, callback, duration, direction, easingType) {
    if (duration === void 0) { duration = 1000; }
    if (direction === void 0) { direction = "horizontal"; }
    if (easingType === void 0) { easingType = easings_1.easeInQuad; }
    return __awaiter(_this, void 0, void 0, function () {
        var promise;
        var _this = this;
        return __generator(this, function (_a) {
            promise = new Promise(function (resolve, reject) {
                if (animating || !element || to === undefined) {
                    return false;
                }
                var end = +new Date() + duration;
                var from = (isElementWindow(element)) ? element.pageXOffset : element.scrollLeft;
                animating = true;
                if (direction === 'vertical') {
                    from = (isElementWindow(element)) ? element.pageYOffset : element.scrollTop;
                }
                var step = function () { return __awaiter(_this, void 0, void 0, function () {
                    var current, remaining, ease;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!animating) {
                                    return [2, resolve(callback())];
                                }
                                current = +new Date();
                                remaining = end - current;
                                if (remaining < 0) {
                                    animating = false;
                                    return [2, resolve(callback())];
                                }
                                else {
                                    ease = easings_1.easings[easingType](1 - remaining / duration);
                                    if (!direction || direction === "horizontal") {
                                        (isElementWindow(element))
                                            ? element.scrollTo(from + (ease * (to - from)), element.pageYOffset)
                                            : element.style.marginLeft = from + (ease * (to - from)) + "px";
                                    }
                                    else if (direction === "vertical") {
                                        (isElementWindow(element))
                                            ? element.scrollTo(element.pageXOffset, from + (ease * (to - from)))
                                            : element.style.marginTop = from + (ease * (to - from)) + "px";
                                    }
                                }
                                return [4, requestAnimationFrame(step)];
                            case 1:
                                _a.sent();
                                return [2];
                        }
                    });
                }); };
                if (!animating) {
                    return true;
                }
                step();
            });
            return [2, promise];
        });
    });
};
//# sourceMappingURL=scrollTo.js.map