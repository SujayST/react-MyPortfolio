"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Arrow_1 = require("./components/Arrow");
var types_1 = require("./components/Arrow/types");
var circular_1 = require("./helpers/circular");
var easings_1 = require("./helpers/easings");
var measurements_1 = require("./helpers/measurements");
var scrollTo_1 = require("./helpers/scrollTo");
var swipedetect_1 = require("./helpers/swipedetect");
__export(require("./components/Slide"));
__export(require("./components/Arrow"));
__export(require("./helpers/easings"));
var defaultOptions = {
    bullet: 'â—‹',
    className: null,
    height: '250px',
    leftArrow: React.createElement(Arrow_1.default, { symbol: '\u25C4' }),
    rightArrow: React.createElement(Arrow_1.default, { symbol: '\u25BA' }),
    showArrows: true,
    slideTime: 500,
    slideXMarginPx: 20,
    slidingType: easings_1.easeInQuad,
    stopPropagation: true,
    width: '100%',
};
var SlidingContainer = (function (_super) {
    __extends(SlidingContainer, _super);
    function SlidingContainer(props) {
        var _this = _super.call(this, props) || this;
        _this.options = null;
        _this.calculatedMeasurements = null;
        _this.containerStyle = {};
        _this.slides = [];
        _this.activeSlideIndex = 0;
        _this.circulated = null;
        _this.updateCurrentSlideIndex = _this.updateCurrentSlideIndex.bind(_this);
        return _this;
    }
    SlidingContainer.prototype.componentWillMount = function () {
        this.options = __assign({}, defaultOptions, (this && typeof this.props !== typeof undefined
            && typeof this.props.options !== typeof undefined
            ? this.props.options
            : {}));
        this.slides = this && typeof this.props !== typeof undefined
            && typeof this.props.children !== typeof undefined && this.props.children
            ? React.Children.toArray(this.props.children)
            : [];
    };
    SlidingContainer.prototype.componentDidMount = function () {
        var _this = this;
        this.calculatedMeasurements = measurements_1.measurements(document, this.options.slideXMarginPx);
        this.containerStyle = this.calculatedMeasurements ? {
            left: this.calculatedMeasurements.slide.left,
            marginLeft: 0,
            right: this.calculatedMeasurements.slide.right
        } : {};
        this.forceUpdate();
        var innerContainer = document.getElementById("innerContainer");
        if (innerContainer !== null) {
            swipedetect_1.swipedetect(document.getElementById("innerContainer"), function (swipedir) {
                if (swipedir === 'left') {
                    _this.updateCurrentSlideIndex(_this.circulated.nextIndex, "right");
                }
                if (swipedir === 'right') {
                    _this.updateCurrentSlideIndex(_this.circulated.previousIndex, "left");
                }
            });
        }
    };
    SlidingContainer.prototype.render = function () {
        var _this = this;
        this.circulated = circular_1.circular(this.slides, this.activeSlideIndex);
        return (React.createElement("div", { id: "react-sliding-container", className: this.options.className, style: { width: this.options.width, height: this.options.height } },
            React.createElement("div", { id: "rscawl" }, this.isShowArrows() && React.cloneElement(this.options.leftArrow, {
                clickHandlerCallback: function () { _this.updateCurrentSlideIndex(_this.circulated.previousIndex, "left"); },
                type: types_1.ARROW_LEFT
            })),
            React.createElement("div", { id: "innerContainer", className: "react-sliding-container-inner", style: this.containerStyle }, this.circulated.calculatedChildren
                && this.circulated.calculatedChildren.length > 0
                && this.circulated.calculatedChildren[0] !== null
                && this.circulated.calculatedChildren[1] !== undefined
                && this.circulated.calculatedChildren.map(function (child, i) { return React.cloneElement(child, {
                    id: "slide-" + i,
                    style: __assign({}, child.props.style, {
                        left: _this.calculateLeft(i) + "px",
                        width: (_this.calculatedMeasurements ? _this.calculatedMeasurements.slide.width : 0) + "px"
                    })
                }); })),
            React.createElement("div", { id: "rscawr" }, this.isShowArrows() && this.options.showArrows && React.cloneElement(this.options.rightArrow, {
                clickHandlerCallback: function () { _this.updateCurrentSlideIndex(_this.circulated.nextIndex, "right"); },
                type: types_1.ARROW_RIGHT
            }))));
    };
    SlidingContainer.prototype.updateCurrentSlideIndex = function (index, direction) {
        var _this = this;
        var moveBy = (this.calculatedMeasurements.slide.width + this.options.slideXMarginPx * 2) * (direction === "left" ? 1 : -1);
        this.activeSlideIndex = index;
        scrollTo_1.scrollTo(document.getElementById("innerContainer"), moveBy, function () {
            _this.forceUpdate();
            document.getElementById("innerContainer").style.marginLeft = null;
        }, this.options.slideTime, "horizontal").then();
    };
    SlidingContainer.prototype.calculateLeft = function (slideIndex) {
        if (this.calculatedMeasurements === null) {
            return 0;
        }
        switch (slideIndex) {
            case 0: return -(this.calculatedMeasurements.slide.width + this.options.slideXMarginPx * 2);
            case 1: return 0;
            case 2: return this.calculatedMeasurements.slide.width + this.options.slideXMarginPx * 2;
            default: throw new Error("Method calculateLeft of component SlidingContainer received unexpected index [" + slideIndex + "].");
        }
    };
    SlidingContainer.prototype.isShowArrows = function () {
        return this.options.showArrows && this.slides.length > 1;
    };
    return SlidingContainer;
}(React.Component));
exports.default = SlidingContainer;
//# sourceMappingURL=index.js.map